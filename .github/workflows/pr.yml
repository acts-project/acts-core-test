name: Additional checks

on:
  - pull_request

jobs:
  build_debug:
    runs-on: ubuntu-18.04
    container: gitlab-registry.cern.ch/acts/machines/ubuntu1910
    steps:
    - uses: actions/checkout@v1
    - name: Build
      run: >
        mkdir build && cd build
        && cmake ..
        -DCMAKE_BUILD_TYPE=Debug
        -DCMAKE_CXX_STANDARD=17
        -DACTS_BUILD_UNITTESTS=ON
        -DCMAKE_CXX_FLAGS="-Werror -fdiagnostics-color=always"
        -DACTS_BUILD_DIGITIZATION_PLUGIN=on
        -DACTS_BUILD_IDENTIFICATION_PLUGIN=on
        -DACTS_BUILD_JSON_PLUGIN=on
        -DACTS_BUILD_BENCHMARKS=on
        -DACTS_BUILD_FATRAS=on
        -DACTS_BUILD_EXAMPLES=on
        -DACTS_BUILD_UNITTESTS=on
        -DACTS_BUILD_LEGACY=on
        -DACTS_BUILD_DD4HEP_PLUGIN=on
        -DACTS_BUILD_TGEO_PLUGIN=on
        -DACTS_BUILD_INTEGRATIONTESTS=off
        && cmake --build . -- -j$(nproc)
        && cmake --build . -- test
        && pip3 install gcovr
        && /usr/bin/python3 ../CI/test_coverage
    - name: Upload coverage
      uses: codecov/codecov-action@v1
      with:
        file: ./build/coverage/cov.xml

  clang_tidy:
    runs-on: ubuntu-18.04
    container: gitlab-registry.cern.ch/acts/machines/ubuntu1910
    steps:
    - uses: actions/checkout@v2

    - name: Install dependencies
      run: >
        apt-get update
        && apt-get install -y clang-tidy python3-pip
        && curl https://raw.githubusercontent.com/llvm-mirror/clang-tools-extra/master/clang-tidy/tool/run-clang-tidy.py -o run-clang-tidy.py
        && pip3 install -r CI/requirements.txt

    - name: Configure
      run: >
        mkdir build && cd build
        && cmake ..
        -DCMAKE_BUILD_TYPE=Release
        -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
        -DCMAKE_CXX_STANDARD=17
        -DACTS_BUILD_UNITTESTS=ON
        -DCMAKE_CXX_FLAGS="-Werror -fdiagnostics-color=always"
        -DACTS_BUILD_DIGITIZATION_PLUGIN=on
        -DACTS_BUILD_IDENTIFICATION_PLUGIN=on
        -DACTS_BUILD_JSON_PLUGIN=on
        -DACTS_BUILD_BENCHMARKS=on
        -DACTS_BUILD_FATRAS=on
        -DACTS_BUILD_EXAMPLES=on
        -DACTS_BUILD_UNITTESTS=on
        -DACTS_BUILD_LEGACY=on
        -DACTS_BUILD_DD4HEP_PLUGIN=on
        -DACTS_BUILD_TGEO_PLUGIN=on
        -DACTS_BUILD_INTEGRATIONTESTS=on

    - name: Run clang-tidy
      run: >
        mkdir report
        && (python3 run-clang-tidy.py 
        -p build 
        -export-fixes report/clang-tidy-fixes.yml 
        -j$(nproc) 
        -clang-apply-replacements-binary=clang-apply-replacements-9
        1> report/clang-tidy.log || true)
        && CI/make_report.py clang-tidy report/clang-tidy.log report/clang-tidy.json -e "$PWD/Tests/*" -e "$PWD/Legacy/*" --filter "$PWD/*"
        && codereport report/clang-tidy.json report --title="clang-tidy" --prefix $PWD
        && CI/static_analysis_results.py --limitfile .static_analysis_limits.yml --itemfile report/clang-tidy.json -v

    - uses: actions/upload-artifact@v1
      with:
        path: report

  comment:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@0.9.0
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            //console.log(context.payload.repository.owner);

            //console.log(github.pulls)
            const org = context.payload.repository.owner.login
            const repo = context.payload.repository;
            var rev = await github.pulls.listReviews({
              pull_number: context.payload.pull_request.number,
              owner: org,
              repo: repo.name
            });

            var review_count = 0;
            for (const review in rev.data) {

              const rev_user = rev.data[0].user;
              var is_reviewer = false;
              try {
                const team_res = await github.teams.getMembershipInOrg({
                  org: org,
                  team_slug: "reviewers",
                  username: rev_user.login,
                });
                if(team_res.data.state == "active") {
                  is_reviewer = true;
                }
              } catch (e) {}
              console.log(is_reviewer);
              if(is_reviewer) {
                review_count++;
              }
            }

            if(review_count > 0) {
              core.info("Is reviewed!");
            }
            else {
              core.setFailed("Not reviewed by the reviewer team");
            }

